stages:
- name: Build Stage
  inputs:
  - type: git
    branch: main
    service: ${GIT_REPO}
  triggers:
  - type: commit
  jobs:
  - name: Build
    type: builder
- name: Deploy Stage
  inputs:
  - type: job
    stage: Build Stage
    job: Build
  triggers:
  - type: stage
  properties:
  - name: DEPLOYER_API_KEY
    value: ${DEPLOYER_API_KEY}
    type: secure
  - name: REGION
    value: ${REGION_ID}
    type: text
  - name: ORG
    value: ${ORGANIZATION}
    type: text
  - name: SPACE
    value: ${SPACE}
    type: text
  - name: ICF_NAMESPACE
    value: ${ICF_NAMESPACE}
    type: text
  - name: ICF_NAMESPACE_ID
    value: ${ICF_NAMESPACE_ID}
    type: text
  - name: POULTRY_SENSE_HOST
    value: ${POULTRY_SENSE_HOST}
    type: text
  - name: POULTRY_SENSE_USERNAME
    value: ${POULTRY_SENSE_USERNAME}
    type: text
  - name: POULTRY_SENSE_PASSWORD
    value: ${POULTRY_SENSE_PASSWORD}
    type: secure
  - name: BTS_HOST
    value: ${BTS_HOST}
    type: text
  - name: BTS_ORG_ID
    value: ${BTS_ORG_ID}
    type: text
  - name: BTS_ORG_PREFIX
    value: ${BTS_ORG_PREFIX}
    type: text
  - name: BTS_ORG_HQ_GLN
    value: ${BTS_ORG_HQ_GLN}
    type: text
  - name: BTS_API_KEY
    value: ${BTS_API_KEY}
    type: secure
  jobs:
  - name: Deploy
    type: builder
    build_type: shell
    script: |-
      #!/bin/bash
      set -x
      echo ">>> Updating and checking installed version of IBM Cloud CLI…"
      ibmcloud update -f -q
      ibmcloud -v
      echo ">>> Logging into IBM Cloud…"
      region=$REGION
      ibmcloud login --apikey $DEPLOYER_API_KEY -r ${region##*:}
      ibmcloud target -g "Default"
      ibmcloud target -o "$ORG" -s "$SPACE"
      echo ">>> Set CLI context to the target namespace:"
      ibmcloud fn property set --namespace $ICF_NAMESPACE
      # echo ">>> Currently Deployed Packages:"
      # ibmcloud fn package list
      # echo ">>> Currently Deployed Actions:"
      # ibmcloud fn action list
      # echo ">>> Currently Deployed Triggers:"
      # ibmcloud fn trigger list
      # echo ">>> Currently Deployed Rules:"
      # ibmcloud fn rule list

      for d in 01_extractor/ 02_transformer/ 03_loader/ $PWD
      do
        if [ -f "$d/manifest.yaml" ] 
        then
          cwd=$(pwd)
          cd $d && echo "Processing $d"
          echo ">>> Replacing ICF_NAMESPACE_ID In Manifest File…"
          sed -i "s/@ICF_NAMESPACE_ID@/$ICF_NAMESPACE_ID/g" manifest.yaml
          echo ">>> Replacing POULTRY_SENSE_HOST In Manifest File…"
          sed -i "s/@POULTRY_SENSE_HOST@/$POULTRY_SENSE_HOST/g" manifest.yaml
          echo ">>> Replacing POULTRY_SENSE_USERNAME In Manifest File…"
          sed -i "s/@POULTRY_SENSE_USERNAME@/$POULTRY_SENSE_USERNAME/g" manifest.yaml
          echo ">>> Replacing POULTRY_SENSE_PASSWORD In Manifest File…"
          sed -i "s/@POULTRY_SENSE_PASSWORD@/$POULTRY_SENSE_PASSWORD/g" manifest.yaml
          echo ">>> Replacing BTS_HOST In Manifest File…"
          sed -i "s/@BTS_HOST@/$BTS_HOST/g" manifest.yaml
          echo ">>> Replacing BTS_ORG_ID In Manifest File…"
          sed -i "s/@BTS_ORG_ID@/$BTS_ORG_ID/g" manifest.yaml
          echo ">>> Replacing BTS_ORG_PREFIX In Manifest File…"
          sed -i "s/@BTS_ORG_PREFIX@/$BTS_ORG_PREFIX/g" manifest.yaml
          echo ">>> Replacing BTS_ORG_HQ_GLN In Manifest File…"
          sed -i "s/@BTS_ORG_HQ_GLN@/$BTS_ORG_HQ_GLN/g" manifest.yaml
          echo ">>> Replacing BTS_API_KEY In Manifest File…"
          sed -i "s/@BTS_API_KEY@/$BTS_API_KEY/g" manifest.yaml
          echo ">>> Contents Of Manifest File:"
          cat manifest.yaml
          [ -f "parameters.sh" ] && source parameters.sh
          echo ">>> Deploying Artifacts Using IBM Cloud CLI…"
          ibmcloud fn deploy -v
          echo ">>> Successfully Deployed Actions Using IBM Cloud CLI."
          cd $cwd
        fi
      done

- name: Health Stage
  inputs:
  - type: job
    stage: Build Stage
    job: Build
  triggers:
  - type: stage
  permission:
    execute: TOOLCHAIN_ADMINS
  jobs:
  - name: Test
    type: deployer
    artifact_dir: ''
    build_type: shell
    target:
      region_id: ${REGION_ID}
      organization: ${ORGANIZATION}
      space: ${SPACE}
      application: ${APP}
      api_key: ${API_KEY}
    script: |-
      #!/bin/sh
      ibmcloud login -a ${CF_TARGET_URL} --apikey ${PIPELINE_BLUEMIX_API_KEY}
      ibmcloud target --cf -o ${CF_ORG} -s ${CF_SPACE}
      if [ "$(ibmcloud fn action invoke CloudFunctionsNodejs/readAll | grep ok:)" != "" ]; then
        echo "Successfully reached health endpoint."
      else
        echo "Could not reach the health endpoint."
        exit 1
      fi
    test_type: customimage
    docker_image: alpine
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: http://lms-api/v1/messaging/webhook/publish
